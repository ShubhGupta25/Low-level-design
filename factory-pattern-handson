/**
 * Design Parking Lot using Factory Pattern
 *
 * The Factory Pattern is used here to create different types of ParkingSpace objects
 * based on the type of Vehicle. This decouples the creation logic from the client code.
 */

// Enum to represent vehicle types
enum VehicleType {
    CAR, BIKE
}

// Vehicle interface
interface Vehicle {
    VehicleType getType(); // Returns the type of vehicle
}

// Concrete Car class implementing Vehicle
@Builder
class Car implements Vehicle {
    public VehicleType getType() {
        return VehicleType.CAR;
    }
}

// Concrete Bike class implementing Vehicle
@Builder
class Bike implements Vehicle {
    public VehicleType getType() {
        return VehicleType.BIKE;
    }
}

// ParkingSpace interface
interface ParkingSpace {
    void parkingSpaceType(); // Prints the type of parking space
}

// Concrete BikeParkingSpace class
@Builder
class BikeParkingSpace implements ParkingSpace {
    public void parkingSpaceType() {
        System.out.println("Bike Parking!");
    }
}

// Concrete CarParkingSpace class
@Builder
class CarParkingSpace implements ParkingSpace {
    public void parkingSpaceType() {
        System.out.println("Car Parking!");
    }
}

// Factory class to create ParkingSpace objects based on Vehicle type
@Builder
class ParkingSpaceFactory {
    public ParkingSpace getParkingSpace(Vehicle vehicle) {
        VehicleType type = vehicle.getType();
        switch (type) {
            case CAR:
                return CarParkingSpace.builder().build();
            case BIKE:
                return BikeParkingSpace.builder().build();
            default:
                throw new IllegalArgumentException("Unknown vehicle type");
        }
    }
}

// Main class to demonstrate usage of the Factory Pattern
public class Solution {
    public static void main(String[] args) {
        Vehicle car = Car.builder().build();
        Vehicle bike = Bike.builder().build();

        ParkingSpaceFactory parkingSpaceFactory = ParkingSpaceFactory.builder().build();
        ParkingSpace carParking = parkingSpaceFactory.getParkingSpace(car);
        ParkingSpace bikeParking = parkingSpaceFactory.getParkingSpace(bike);

        carParking.parkingSpaceType(); // Output: Car Parking!
        bikeParking.parkingSpaceType(); // Output: Bike Parking!
    }
}